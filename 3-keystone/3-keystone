#!/bin/bash

# Carica variabili dall'ENV file
if [[ -f "keystone-config.env" ]]; then
    export $(grep -v '^#' keystone-config.env | xargs)
else
    echo -e "\e[31m[ERROR]\e[0m File keystone-config.env non trovato! Crealo prima di eseguire questo script."
    exit 1
fi

# Funzione per stampare messaggi di errore
function error_exit {
    echo -e "\e[31m[ERROR]\e[0m $1"
    exit 1
}

# Funzione per stampare messaggi di informazione
function info {
    echo -e "\e[34m[INFO]\e[0m $1"
}

# Funzione per stampare messaggi di successo
function success {
    echo -e "\e[32m[SUCCESS]\e[0m $1"
}

# Funzione per attendere che il container sia pronto
function wait_for_container {
    local container_name="$1"
    local retries=30
    local wait_time=2
    info "Attesa che il container '$container_name' sia pronto..."
    while [[ $retries -gt 0 ]]; do
        if docker ps --format '{{.Names}}' | grep -q "^$container_name$"; then
            success "Il container '$container_name' è pronto."
            return 0
        fi
        retries=$((retries - 1))
        sleep $wait_time
    done
    error_exit "Il container '$container_name' non è pronto dopo diversi tentativi."
}

# Verifica del file adminrc
if [[ -f "$ADMINRC_FILE" ]]; then
    info "Aggiornamento del file adminrc..."
    sed -i "s|OS_AUTH_URL=.*|OS_AUTH_URL=$URL|g" "$ADMINRC_FILE"
    sed -i "s|OS_PASSWORD=.*|OS_PASSWORD=$ADMIN_PASS|g" "$ADMINRC_FILE"
else
    error_exit "File $ADMINRC_FILE non trovato!"
fi

# Visualizza il file adminrc aggiornato
info "Questo è il tuo file adminrc aggiornato:"
while IFS= read -r line; do
    printf 'export %s\n' "$line"
done <"$ADMINRC_FILE"

# Build dell'immagine Docker
if [[ -d "$BUILD_DIR" ]]; then
    info "Build dell'immagine Docker da $BUILD_DIR..."
    docker build -t "$IMAGE_NAME:$VERSION" "$BUILD_DIR" || error_exit "Errore durante la build dell'immagine Docker."
    success "Immagine Docker '$IMAGE_NAME:$VERSION' creata con successo."
else
    error_exit "La directory $BUILD_DIR non esiste!"
fi

# Creazione del container Docker per Keystone
info "Creazione del container Docker Keystone con rete host..."
docker create \
    --env-file "$ADMINRC_FILE" \
    --name="$KEYSTONE_CONTAINER_NAME" \
    --restart unless-stopped \
    --network=host \
    -v keystone_config:/etc/keystone/ \
    -v keystone_data:/var/lib/keystone/ \
    -v /var/log/keystone:/var/log/keystone \
    -v /var/log/keystone-api:/var/log/apache2 \
    "$IMAGE_NAME:$VERSION" || error_exit "Errore durante la creazione del container Docker."

success "Container Docker '$KEYSTONE_CONTAINER_NAME' creato con successo."

# Avvio del container Keystone
info "Avvio del container Docker Keystone..."
docker start "$KEYSTONE_CONTAINER_NAME" || error_exit "Errore durante l'avvio del container Docker."

# Attendi che il container sia pronto
wait_for_container "$KEYSTONE_CONTAINER_NAME"

# Modifica dinamica del file keystone.conf
info "Modifica del file keystone.conf nel container..."
docker exec "$KEYSTONE_CONTAINER_NAME" /bin/sh -c "
    sed -i \"s|^connection *=.*|connection = mysql+pymysql://$KEYSTONE_DB_USER:$KEYSTONE_DBPASS@$DB_HOST/$KEYSTONE_DB_NAME|g\" /etc/keystone/keystone.conf &&
    sed -i \"s|^admin_token *=.*|admin_token = $ADMIN_TOKEN|g\" /etc/keystone/keystone.conf &&
    sed -i \"s|^public_endpoint *=.*|public_endpoint = $PUBLIC_ENDPOINT|g\" /etc/keystone/keystone.conf &&
    sed -i \"s|^admin_endpoint *=.*|admin_endpoint = $ADMIN_ENDPOINT|g\" /etc/keystone/keystone.conf &&
    sed -i \"s|^internal_endpoint *=.*|internal_endpoint = $INTERNAL_ENDPOINT|g\" /etc/keystone/keystone.conf
" || error_exit "Errore durante la modifica del file keystone.conf."

# Imposta i permessi sui log di Keystone
info "Impostazione dei permessi sui log di Keystone..."
docker exec "$KEYSTONE_CONTAINER_NAME" /bin/sh -c "chown -R keystone:keystone /var/log/keystone" || error_exit "Errore durante l'impostazione dei permessi sui log."

success "Container Docker '$KEYSTONE_CONTAINER_NAME' configurato e avviato con successo."
