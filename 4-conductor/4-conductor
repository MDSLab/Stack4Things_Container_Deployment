#!/bin/bash

# Caricamento della configurazione dal file
CONFIG_FILE="./conductor-config.env"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Errore: Il file di configurazione $CONFIG_FILE non esiste."
    exit 1
fi
source "$CONFIG_FILE"

# Funzione per stampare messaggi di errore
function error_exit {
    echo "Errore: $1"
    exit 1
}

# Funzione per verificare la connessione al database
function verify_db_connection {
    echo "Verifica della connessione al database..."
    docker run --rm \
        --net=host \
        -v "$CONFIG_VOLUME:/etc/iotronic/" \
        -v "$LOG_VOLUME:/var/log/iotronic" \
        "$IMAGE_NAME:$VERSION" \
        /bin/sh -c "python3 -c '
import os
import sqlalchemy
from sqlalchemy import create_engine

try:
    db_url = \"${DB_CONNECTION_STRING}\"
    engine = create_engine(db_url)
    with engine.connect() as connection:
        print(\"Connessione al database riuscita!\")
except Exception as e:
    print(f\"Errore nella connessione al database: {e}\")
    exit(1)
'"
    if [ $? -ne 0 ]; then
        error_exit "Impossibile connettersi al database. Verifica la stringa di connessione: $DB_CONNECTION_STRING"
    fi
}

# Verifica dell'esistenza del repository iotronic
if [ ! -d "$REPO_DIR" ]; then
    error_exit "La directory del repository $REPO_DIR non esiste."
fi

# Verifica se il file di configurazione esiste
if [ ! -f "$CONF_FILE" ]; then
    error_exit "Il file di configurazione $CONF_FILE non esiste."
fi

# Passaggio 1: Copia del repository iotronic nella directory di build
echo "Preparazione della directory di build..."
cp -r "$REPO_DIR" "$BUILD_DIR/" || error_exit "Errore durante la copia del repository iotronic nella directory di build."

# Passaggio 2: Build dell'immagine Docker
echo "Costruzione dell'immagine Docker..."
cd "$BUILD_DIR" || error_exit "Impossibile accedere alla directory $BUILD_DIR"
docker build -t "$IMAGE_NAME:$VERSION" . || error_exit "Errore durante la build dell'immagine Docker."
cd - >/dev/null
echo "Build completata con successo."

# Passaggio 3: Creazione del container
echo "Creazione del container Docker..."
docker create \
    --name="$CONTAINER_NAME" \
    --restart unless-stopped \
    --net=host \
    --hostname=conductor \
    -p "$PORT_MAPPING" \
    -v "$CONFIG_VOLUME:/etc/iotronic/" \
    -v "$LOG_VOLUME:/var/log/iotronic" \
    "$IMAGE_NAME:$VERSION" || error_exit "Errore durante la creazione del container Docker."
echo "Container creato con successo."

# Passaggio 4: Copia del file di configurazione nel container
echo "Copia del file di configurazione nel container..."
docker cp "$CONF_FILE" "$CONTAINER_NAME:/etc/iotronic/" || error_exit "Errore durante la copia del file di configurazione."
echo "File di configurazione copiato con successo."

# Passaggio 5: Configurazione dei permessi sui log
echo "Configurazione dei permessi sui log..."
docker run --rm \
    --net=host \
    -v "$CONFIG_VOLUME:/etc/iotronic/" \
    -v "$LOG_VOLUME:/var/log/iotronic" \
    "$IMAGE_NAME:$VERSION" \
    /bin/sh -c "chown -R iotronic:iotronic /var/log/iotronic/" || error_exit "Errore durante la configurazione dei permessi sui log."
echo "Permessi sui log configurati con successo."

# Passaggio 6: Verifica della connessione al database
verify_db_connection

# Passaggio 7: Sincronizzazione del database
echo "Sincronizzazione del database di iotronic..."
docker run --rm \
    --net=host \
    -v "$CONFIG_VOLUME:/etc/iotronic/" \
    -v "$LOG_VOLUME:/var/log/iotronic" \
    "$IMAGE_NAME:$VERSION" \
    /bin/sh -c "iotronic-dbsync" || error_exit "Errore durante la sincronizzazione del database."
echo "Database sincronizzato con successo."

# Passaggio 8: Avvio del container
echo "Avvio del container Docker..."
docker start "$CONTAINER_NAME" || error_exit "Errore durante l'avvio del container Docker."
echo "Container $CONTAINER_NAME avviato con successo."
