version: "3.8"

services:
  ca_service:
    image: debian:buster
    container_name: ca_service
    networks:
      - s4t
    volumes:
      - iotronic_ssl:/etc/ssl/iotronic  # Condiviso con iotronic-wstun
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        echo "[INFO] Installazione di OpenSSL..."
        apt-get update && apt-get install -y openssl &&

        echo "[INFO] Generazione della Root CA..."
        mkdir -p /etc/ssl/iotronic &&
        cd /etc/ssl/iotronic &&

        openssl genrsa -out iotronic_CA.key 2048 &&
        openssl req -x509 -new -nodes -key iotronic_CA.key -sha256 -days 18250 \
          -subj "/C=IT/O=iotronic" -out iotronic_CA.pem &&

        echo "[INFO] Generazione della chiave privata e del certificato per Crossbar..."
        openssl genrsa -out crossbar.key 2048 &&
        openssl req -new -key crossbar.key -subj "/C=IT/O=iotronic/CN=crossbar" -out crossbar.csr &&
        openssl x509 -req -in crossbar.csr -CA iotronic_CA.pem -CAkey iotronic_CA.key -CAcreateserial -out crossbar.pem -days 18250 -sha256 &&

        echo "[INFO] Impostazione permessi certificati..."
        chmod 644 iotronic_CA.key iotronic_CA.pem crossbar.key crossbar.pem
        chmod 755 /etc/ssl/iotronic

        echo "[INFO] Certificati generati con successo."
        tail -f /dev/null

  crossbar:
    image: crossbario/crossbar
    container_name: crossbar
    restart: unless-stopped
    networks:
      - s4t
    volumes:
      - iotronic_ssl:/node/.crossbar/ssl  # Condiviso con iotronic-wstun
      - crossbar_data:/node/.crossbar
    ports:
      - "8181:8181"
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "[INFO] Attesa dei certificati..."
        while [ ! -f /node/.crossbar/ssl/crossbar.pem ] || [ ! -f /node/.crossbar/ssl/crossbar.key ]; do
          sleep 2
        done
        echo "[INFO] Certificati trovati!"

        echo "[INFO] Scrittura configurazione Crossbar..."
        cat <<EOF > /node/.crossbar/config.json
        {
           "version": 2,
           "controller": {},
           "workers": [
              {
                 "type": "router",
                 "realms": [
                    {
                       "name": "s4t",
                       "roles": [
                          {
                             "name": "anonymous",
                             "permissions": [
                                {
                                   "uri": "*",
                                   "allow": {
                                        "publish": true,
                                        "subscribe": true,
                                        "call": true,
                                        "register": true
                                    }
                                }
                             ]
                          }
                       ]
                    }
                 ],
                 "transports": [
                    {
                        "type": "websocket",
                        "endpoint": {
                          "type": "tcp",
                          "port": 8181,
                          "tls": {
                                "chain_certificates": ["/node/.crossbar/ssl/iotronic_CA.pem"],
                                "key": "/node/.crossbar/ssl/crossbar.key",
                                "certificate": "/node/.crossbar/ssl/crossbar.pem"
                          }
                        },
                        "options":{
                                "enable_webstatus": true,
                                "fail_by_drop": true,
                                "open_handshake_timeout": 2500,
                                "close_handshake_timeout": 1000,
                                "auto_ping_interval": 30000,
                                "auto_ping_timeout": 5000,
                                "auto_ping_size": 13
                        }
                    }
                 ]
              }
           ]
        }
        EOF

        echo "[INFO] Avvio di Crossbar..."
        crossbar start

  iotronic-wstun:
    image: lucadagati/iotronic-wstun:latest
    container_name: iotronic-wstun
    restart: unless-stopped
    networks:
      - s4t
    ports:
      - "8080:8080"
      - "50000-50100:50000-50100"
    volumes:
      - iotronic_ssl:/var/lib/iotronic/ssl
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        set -x  # DEBUG: Mostra i comandi eseguiti
        echo "[INFO] Verifica permessi certificati..."
        ls -l /var/lib/iotronic/ssl
        while [ ! -e /var/lib/iotronic/ssl/iotronic_CA.pem ] || [ ! -e /var/lib/iotronic/ssl/crossbar.key ]; do
          echo "[DEBUG] Certificati mancanti:"
          ls -l /var/lib/iotronic/ssl
          sleep 2
        done

        echo "[INFO] Certificati SSL trovati!"
        ls -l /var/lib/iotronic/ssl

        echo "[INFO] Avvio di iotronic-wstun..."
        exec node /usr/local/lib/node_modules/@mdslab/wstun/bin/wstun.js -r -s 8080 --ssl=true --key=/var/lib/iotronic/ssl/iotronic_CA.key --cert=/var/lib/iotronic/ssl/iotronic_CA.pem

  iotronic-db:
    image: mariadb:focal
    container_name: iotronic-db
    restart: unless-stopped
    networks:
      - s4t
    environment:
      MYSQL_ROOT_PASSWORD: "unime"
      MYSQL_DATABASE: "unime"
      MYSQL_USER: "admin"
      MYSQL_PASSWORD: "s4t"
    ports:
      - "53306:3306"
    volumes:
      - unime_test_iotronic_db_data:/var/lib/mysql
      - unime_test_iotronic_db_config:/etc/mysql
      - ./create_dbs.sql:/docker-entrypoint-initdb.d/create_dbs.sql
      - ./99-openstack.conf:/etc/mysql/mariadb.conf.d/99-openstack.cnf
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-punime"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s

  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    restart: unless-stopped
    networks:
      - s4t
    ports:
      - "5672:5672"
    environment:
      RABBIT_PASS: "unime"
    volumes:
      - ./conf-rabbit-script.sh:/docker-entrypoint-initRabbit.sh
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        chmod +x /docker-entrypoint-initRabbit.sh
        /bin/bash /docker-entrypoint-initRabbit.sh


  keystone:
    image: lucadagati/iotronic-keystone
    container_name: keystone
    restart: unless-stopped
    depends_on:
      iotronic-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - s4t
    environment:
      # Credenziali admin e impostazioni Keystone
      ADMIN_PASS: "s4t"
      OS_USERNAME: "admin"
      OS_PASSWORD: "s4t"
      OS_PROJECT_NAME: "admin"
      OS_USER_DOMAIN_NAME: "Default"
      OS_PROJECT_DOMAIN_NAME: "Default"
      OS_AUTH_URL: "http://keystone:5000/v3"
      OS_IDENTITY_API_VERSION: "3"

      KEYSTONE_DB_NAME: "keystone"
      KEYSTONE_DB_USER: "keystone"
      KEYSTONE_DBPASS: "unime"

      DB_HOST: "iotronic-db"
      RABBIT_PASS: "unime"
      REGION_NAME: "RegionOne"
    ports:
      - "5000:5000"
    volumes:
      - ./conf_keystone:/etc/keystone
      - keystone_data:/var/lib/keystone
      - /var/log/keystone:/var/log/keystone
      - /var/log/keystone-api:/var/log/apache2
    command: >
      /bin/bash -c "
      echo '[INFO] Attesa del database Keystone...';
      until mysql -h iotronic-db -uroot -punime -e 'SELECT 1' >/dev/null 2>&1; do
        echo '[INFO] Database non ancora pronto, riprovo...';
        sleep 5;
      done;
      echo '[INFO] Database pronto!';
      mysql -u root -punime -h iotronic-db -e \"CREATE DATABASE IF NOT EXISTS keystone;
      CREATE DATABASE IF NOT EXISTS iotronic;
      DROP USER IF EXISTS 'keystone'@'localhost';
      DROP USER IF EXISTS 'keystone'@'%';
      CREATE USER 'keystone'@'localhost' IDENTIFIED BY 'unime';
      CREATE USER 'keystone'@'%' IDENTIFIED BY 'unime';
      GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost';
      GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%';
      DROP USER IF EXISTS 'iotronic'@'localhost';
      DROP USER IF EXISTS 'iotronic'@'%';
      CREATE USER 'iotronic'@'localhost' IDENTIFIED BY 'unime';
      CREATE USER 'iotronic'@'%' IDENTIFIED BY 'unime';
      GRANT ALL PRIVILEGES ON iotronic.* TO 'iotronic'@'localhost';
      GRANT ALL PRIVILEGES ON iotronic.* TO 'iotronic'@'%';
      FLUSH PRIVILEGES;\";
      echo '[INFO] Creazione delle cartelle per le chiavi Fernet e credenziali...';
      mkdir -p /etc/keystone/fernet-keys;
      mkdir -p /etc/keystone/credential-keys;
      chown -R keystone:keystone /etc/keystone;

      echo '[INFO] Verifica delle chiavi Fernet...';
      if [ ! -f /etc/keystone/fernet-keys/0 ]; then
        echo '[INFO] Nessuna chiave Fernet trovata, eseguo fernet_setup...';
        su -s /bin/sh -c 'keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone' keystone;
      else
        echo '[INFO] Chiavi Fernet già presenti.';
      fi

      echo '[INFO] Verifica delle credenziali crittografate...';
      if [ ! -f /etc/keystone/credential-keys/0 ]; then
        echo '[INFO] Nessuna chiave di credenziali trovata, eseguo credential_setup...';
        su -s /bin/sh -c 'keystone-manage credential_setup --keystone-user keystone --keystone-group keystone' keystone;
      else
        echo '[INFO] Chiavi di credenziali già presenti.';
      fi

      echo '[INFO] Sincronizzazione delle tabelle di Keystone...';
      su -s /bin/sh -c 'keystone-manage db_sync' keystone;
      echo '[INFO] Configurazione dei token Fernet...';
      su -s /bin/sh -c 'keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone' keystone;
      echo '[INFO] Configurazione delle credenziali crittografate...';
      su -s /bin/sh -c 'keystone-manage credential_setup --keystone-user keystone --keystone-group keystone' keystone;
      echo '[INFO] Bootstrap di Keystone...';
      su -s /bin/sh -c 'keystone-manage bootstrap --bootstrap-password s4t --bootstrap-admin-url http://keystone:5000/v3 --bootstrap-internal-url http://keystone:5000/v3 --bootstrap-public-url http://keystone:5000/v3 --bootstrap-region-id RegionOne' keystone;
      exec apache2ctl -D FOREGROUND"
      su -s /bin/bash -c 'until openstack token issue ; do
        echo "[INFO] keystone non ancora pronto, riprovo registrazione servizi IOTRONIC dopo...";
        sleep 5;
      done;' keystone;
      echo '[INFO] Creazione dei servizi di Iotronic...';
      su -s /bin/sh -c 'openstack service create iot --name Iotronic' keystone;
      echo '[INFO] Iotronic User Create...';
      su -s /bin/sh -c 'openstack user create --password unime iotronic' keystone;
      echo '[INFO] Iotronic roles...';
      su -s /bin/sh -c 'openstack role add --project service --user iotronic admin' keystone;
      su -s /bin/sh -c 'openstack role create admin_iot_project' keystone;
      su -s /bin/sh -c 'openstack role create manager_iot_project' keystone;
      su -s /bin/sh -c 'openstack role create admin_iot_project' keystone;
      su -s /bin/sh -c 'openstack role create user_iot' keystone;
      su -s /bin/sh -c 'openstack role add --project service --user iotronic admin_iot_project' keystone;
      su -s /bin/sh -c 'openstack role add --project admin --user admin admin_iot_project' keystone;
      echo '[INFO] Iotronic endpoints...';
      su -s /bin/sh -c 'openstack endpoint create --region RegionOne iot public controller:8812' keystone;
      su -s /bin/sh -c 'openstack endpoint create --region RegionOne iot internal iotronic-conductor:8812' keystone;
      su -s /bin/sh -c 'openstack endpoint create --region RegionOne iot admin iotronic-conductor:8812' keystone;

  iotronic-conductor:
    image: lucadagati/iotronic-conductor:latest
    container_name: iotronic-conductor
    restart: unless-stopped
    networks:
      - s4t
    environment:
      # Credenziali DB Iotronic
      MYSQL_ROOT_PASSWORD: "s4t"
      DB_HOST: "iotronic-db"
      IOTRONIC_DB_NAME: "iotronic"
      IOTRONIC_DB_USER: "iotronic"
      IOTRONIC_DBPASS: "unime"

      # Credenziali OpenStack
      OS_AUTH_URL: "http://keystone:5000/v3"
      OS_USERNAME: "admin"
      OS_PASSWORD: "s4t"
      OS_PROJECT_NAME: "admin"
      OS_USER_DOMAIN_NAME: "Default"
      OS_PROJECT_DOMAIN_NAME: "Default"

      # Stringa di connessione
      DB_CONNECTION_STRING: "mysql+pymysql://iotronic:unime@iotronic-db/iotronic"
    ports:
      - "8812:8812"
    volumes:
      - ./conf_conductor:/etc/iotronic
      - iotronic_logs:/var/log/iotronic
    command: >
      /bin/bash -c "
        echo '[INFO] Attesa del database MySQL...';
        until mysql -h iotronic-db -uroot -punime -e 'SELECT 1' >/dev/null 2>&1; do
          echo '[INFO] Database non ancora pronto, riprovo...';
          sleep 5;
        done;
        iotronic-dbsync;
        echo '[INFO] Configurazione dei permessi sui log...';
        chown -R iotronic:iotronic /var/log/iotronic;
        echo '[INFO] Avvio di Iotronic Conductor...';
        iotronic-conductor"

  wagent:
    image: lucadagati/iotronic-wagent:latest
    container_name: iotronic-wagent
    restart: unless-stopped
    networks:
      - s4t
    environment:
      # DB info
      MYSQL_ROOT_PASSWORD: "s4t"
      DB_HOST: "iotronic-db"

      # Stringa di connessione
      DB_CONNECTION_STRING: "mysql+pymysql://iotronic:unime@iotronic-db/iotronic"

      # Credenziali OpenStack
      OS_AUTH_URL: "http://keystone:5000/v3"
      OS_USERNAME: "admin"
      OS_PASSWORD: "s4t"
      OS_PROJECT_NAME: "admin"
      OS_USER_DOMAIN_NAME: "Default"
      OS_PROJECT_DOMAIN_NAME: "Default"
    volumes:
      - ./conf_wagent:/etc/iotronic
      - iotronic_logs:/var/log/iotronic
    command: >
      /bin/bash -c "
        echo '[INFO] Configurazione dei permessi sui log...';
        chown -R iotronic:iotronic /var/log/iotronic;
        echo '[INFO] Avvio del Wagent...';
        exec /usr/local/bin/iotronic-wamp-agent --config-file /etc/iotronic/iotronic.conf"

  iotronic-ui:
    image: lucadagati/iotronic-ui:latest
    container_name: iotronic-ui
    restart: unless-stopped
    networks:
      - s4t
    ports:
      - "8585:80"
    volumes:
      - iotronic-ui_config:/etc/openstack-dashboard
      - iotronic-ui_logs:/var/log/apache2
      - ./conf_ui:/etc/openstack-dashboard  # <--- Monta tutta la cartella

networks:
  s4t:
    driver: bridge

volumes:
  db_data:
  keystone_data:
  iotronic_logs:
  iotronic-ui_logs:
  iotronic-ui_config:
  crossbar_data:
  ca_data:
  iotronic_ssl:
  unime_test_iotronic_db_data:
  unime_test_iotronic_db_config:
