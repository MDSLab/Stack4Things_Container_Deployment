#!/bin/bash

# Abilita il fail immediato in caso di errori
set -e

# Percorso del file di configurazione
CONFIG_FILE="mysql-config.env"

# Funzione di log per output formattato
log() {
    echo -e "\e[34m[INFO]\e[0m $1"
}

# Funzione per gestire errori
error_exit() {
    echo -e "\e[31m[ERROR]\e[0m $1"
    exit 1
}

# Funzione per verificare se MySQL è pronto
wait_for_mysql() {
    log "Attesa dell'avvio di MariaDB..."
    local retries=30
    while [[ $retries -gt 0 ]]; do
        if docker exec "$CONTAINER_NAME" mysqladmin ping -uroot -p"$MYSQL_ROOT_PASSWORD" --silent; then
            log "MariaDB è pronto."
            return 0
        fi
        retries=$((retries - 1))
        sleep 2
    done
    error_exit "MariaDB non è pronto dopo un lungo periodo di attesa."
}

# Carica variabili dal file mysql-config.env
if [[ -f "$CONFIG_FILE" ]]; then
    log "Caricamento delle variabili da $CONFIG_FILE"
    while IFS='=' read -r key value; do
        # Ignora righe vuote o commenti
        if [[ ! "$key" =~ ^# ]] && [[ -n "$key" ]]; then
            export "$key"="$(echo "$value" | xargs)"
        fi
    done < "$CONFIG_FILE"
else
    error_exit "File $CONFIG_FILE non trovato! Crealo prima di eseguire questo script."
fi

# Verifica che le password e altre variabili siano definite
if [[ -z "$KEYSTONE_DBPASS" || -z "$IOTRONIC_DBPASS" || -z "$DESIGNATE_DBPASS" || -z "$MYSQL_ROOT_PASSWORD" || -z "$CONTAINER_NAME" || -z "$IMAGE_NAME" ]]; then
    error_exit "Una o più variabili obbligatorie non sono definite nel file $CONFIG_FILE."
fi

# Creazione del container Docker per MariaDB
log "Creazione del container Docker per MariaDB..."
docker create \
 --name="$CONTAINER_NAME" \
 --network=host \
 --restart unless-stopped \
 -e MYSQL_ROOT_PASSWORD="$MYSQL_ROOT_PASSWORD" \
 -v ${CONTAINER_NAME}_data:/var/lib/mysql \
 -v ${CONTAINER_NAME}_config:/etc/mysql \
 "$IMAGE_NAME" || log "Il container esiste già. Procedo con l'avvio."

# Verifica della presenza dei file di configurazione prima della copia
if [[ ! -f 99-openstack.conf ]]; then
    error_exit "File 99-openstack.conf non trovato!"
fi

# Avvio del container MariaDB
log "Avvio del container MariaDB..."
docker start "$CONTAINER_NAME"

# Attendi che MySQL sia pronto
wait_for_mysql

# Copia dei file di configurazione nel container
log "Copia dei file di configurazione nel container..."
docker cp 99-openstack.conf "$CONTAINER_NAME:/etc/mysql/mariadb.conf.d/99-openstack.cnf"

# Riavvio del container per applicare la configurazione
log "Riavvio del container per applicare la configurazione..."
docker restart "$CONTAINER_NAME"

# Attendi che MySQL sia pronto dopo il riavvio
wait_for_mysql

# Configurazione dei database tramite comandi SQL
log "Configurazione dei database..."
docker exec "$CONTAINER_NAME" mysql -uroot -p"$MYSQL_ROOT_PASSWORD" <<EOF
-- Creazione del database e utente per Keystone
CREATE DATABASE IF NOT EXISTS $KEYSTONE_DB_NAME;
GRANT ALL PRIVILEGES ON $KEYSTONE_DB_NAME.* TO '$KEYSTONE_DB_USER'@'localhost' IDENTIFIED BY '$KEYSTONE_DBPASS';
GRANT ALL PRIVILEGES ON $KEYSTONE_DB_NAME.* TO '$KEYSTONE_DB_USER'@'%' IDENTIFIED BY '$KEYSTONE_DBPASS';

-- Creazione del database e utente per Iotronic
CREATE DATABASE IF NOT EXISTS $IOTRONIC_DB_NAME;
GRANT ALL PRIVILEGES ON $IOTRONIC_DB_NAME.* TO '$IOTRONIC_DB_USER'@'localhost' IDENTIFIED BY '$IOTRONIC_DBPASS';
GRANT ALL PRIVILEGES ON $IOTRONIC_DB_NAME.* TO '$IOTRONIC_DB_USER'@'%' IDENTIFIED BY '$IOTRONIC_DBPASS';

-- Creazione del database e utente per Designate
CREATE DATABASE IF NOT EXISTS $DESIGNATE_DB_NAME;
GRANT ALL PRIVILEGES ON $DESIGNATE_DB_NAME.* TO '$DESIGNATE_DB_USER'@'localhost' IDENTIFIED BY '$DESIGNATE_DBPASS';
GRANT ALL PRIVILEGES ON $DESIGNATE_DB_NAME.* TO '$DESIGNATE_DB_USER'@'%' IDENTIFIED BY '$DESIGNATE_DBPASS';

-- Ricarica privilegi per assicurare l'applicazione immediata
FLUSH PRIVILEGES;
EOF

log "Operazione completata. Puoi controllare i log con il comando:"
echo -e "\e[32m  docker logs -f $CONTAINER_NAME\e[0m"
